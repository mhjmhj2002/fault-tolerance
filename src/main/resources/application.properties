#RateLimiter functionality
#represent that only 2 requests are allowed in 5 seconds duration. Also, there is no timeout duration which means after completion of 5 seconds, the user can send request again.
#resilience4j.ratelimiter.instances.getMessageRateLimit.limit-for-period=2
#resilience4j.ratelimiter.instances.getMessageRateLimit.limit-refresh-period=5s
resilience4j.ratelimiter.instances.getMessageRateLimit.limit-for-period=10
resilience4j.ratelimiter.instances.getMessageRateLimit.limit-refresh-period=1s
resilience4j.ratelimiter.instances.getMessageRateLimit.timeout-duration=0

#Retry functionality
resilience4j.retry.instances.getInvoiceRetry.max-attempts=5
resilience4j.retry.instances.getInvoiceRetry.wait-duration=2s
#resilience4j.retry.instances.getInvoiceRetry.retry-exceptions=org.springframework.web.client.ResourceAccessException
resilience4j.retry.instances.getInvoiceRetry.retry-exceptions=org.springframework.web.client.HttpClientErrorException

#Circuit Breaker functionality

#indicates that if 80% of requests are getting failed, open the circuit ie. Make the Circuit Breaker state as Open.
resilience4j.circuitbreaker.instances.getInvoiceCB.failure-rate-threshold=80

#indicates that if 80% of requests out of 10 (it means 8) are failing, open the circuit.
resilience4j.circuitbreaker.instances.getInvoiceCB.sliding-window-size=10

#indicates that we are using COUNT_BASED sliding window. Another type is TIME_BASED.
resilience4j.circuitbreaker.instances.getInvoiceCB.sliding-window-type=COUNT_BASED

#indicates that we need at least 5 calls to calculate the failure rate threshold.
resilience4j.circuitbreaker.instances.getInvoiceCB.minimum-number-of-calls=5

#indicates that dont switch directly from the open state to the closed state, consider the half-open state also.
resilience4j.circuitbreaker.instances.getInvoiceCB.automatic-transition-from-open-to-half-open-enabled=true

#indicates that when on half-open state, consider sending 4 requests. If 80% of them are failing, switch circuit breaker to open state.
resilience4j.circuitbreaker.instances.getInvoiceCB.permitted-number-of-calls-in-half-open-state=4

#indicates the waiting time interval while switching from the open state to the closed state.
resilience4j.circuitbreaker.instances.getInvoiceCB.wait-duration-in-open-state=1s

#Bulkhead functionality
#indicates that if the number of concurrent calls exceed 5
resilience4j.bulkhead.instances.getMessageBH.max-concurrent-calls=5
#activate the fallback method
resilience4j.bulkhead.instances.getMessageBH.max-wait-duration=0

#TimeLimiter functionality
#indicates that the maximum amount of time a request can take to respond is 1 millisecond
resilience4j.timelimiter.instances.getMessageTL.timeout-duration=10000ms
# indicates that do not cancel the Running Completable Futures After TimeOut.
resilience4j.timelimiter.instances.getMessageTL.cancel-running-future=false
